% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ENMevaluate.R
\name{ENMevaluate}
\alias{ENMevaluate}
\title{Tune ecological niche model (ENM) settings and calculate evaluation statistics}
\usage{
ENMevaluate(
  occs,
  envs = NULL,
  bg = NULL,
  tune.args = NULL,
  partitions = NULL,
  algorithm = NULL,
  partition.settings = list(orientation = "lat_lon", aggregation.factor = 2, kfolds =
    5),
  other.settings = list(abs.auc.diff = TRUE, pred.type = "cloglog", validation.bg =
    "full"),
  categoricals = NULL,
  doClamp = TRUE,
  clamp.directions = NULL,
  user.enm = NULL,
  user.grp = NULL,
  occs.testing = NULL,
  taxon.name = NULL,
  n.bg = 10000,
  overlap = FALSE,
  overlapStat = c("D", "I"),
  user.val.grps = NULL,
  user.eval = NULL,
  rmm = NULL,
  parallel = FALSE,
  numCores = NULL,
  parallelType = "doSNOW",
  updateProgress = FALSE,
  quiet = FALSE,
  occ = NULL,
  env = NULL,
  bg.coords = NULL,
  RMvalues = NULL,
  fc = NULL,
  occ.grp = NULL,
  bg.grp = NULL,
  method = NULL,
  bin.output = NULL,
  rasterPreds = NULL,
  clamp = NULL,
  progbar = NULL
)
}
\arguments{
\item{occs}{matrix / data frame: occurrence records with two columns for longitude and latitude 
of occurrence localities, in that order -- if specifying predictor variable values
assigned to presence/background localities (species with data "SWD" form), this table will also have 
one column for each predictor variable}

\item{envs}{RasterStack: environmental predictor variables (must be in same geographic projection as occurrence data)}

\item{bg}{matrix / data frame: background records with two columns for longitude and latitude of 
background (or pseudo-absence) localities, in that order; if specifying predictor variable values
assigned to presence/background localities (species with data "SWD" form), this table will also have 
one column for each predictor variable; if NULL, points will be randomly sampled across \code{envs} 
with the number specified by argument \code{n.bg}}

\item{tune.args}{named list: model settings to be tuned (i.e., list(fc = c("L","Q"), rm = 1:3))}

\item{partitions}{character: name of partitioning technique (see \code{?partitions})}

\item{algorithm}{character: name of the algorithm used to build models -- one of "maxnet" or
"maxent.jar", else the name from a custom ENMdetails implementation}

\item{partition.settings}{named list: used to specify certain settings for partitioning schema.
The options are:}

\item{other.settings}{named list: used to specify extra settings for the analysis,
inserted as an argument to ENMevaluate(). All of these settings have internal defaults,
so if they are not specified the analysis will be run with default settings.}

\item{categoricals}{character vector: name or names of categorical environmental variables -- if not specified,
all predictor variables will be treated as continuous unless they are factors (if categorical variables
are already factors, specifying names of such variables in this argument is not needed)}

\item{doClamp}{boolean: if TRUE (default), model prediction extrapolations will be restricted to the upper and lower
bounds of the predictor variables -- this avoids extreme predictions for non-analog environments, but
if extrapolation is a study aim, this should be set to FALSE}

\item{clamp.directions}{named list: specifies the direction ("left" for minimum, "right" for maximum) 
of clamping for predictor variables -- (e.g.) list(left = c("bio1","bio5"), right = c("bio10","bio15"))}

\item{user.enm}{ENMdetails object: an alternative to specifying an algorithm, users can insert a custom
ENMdetails object to build models with}

\item{user.grp}{named list: specifies user-defined partition groups, where occs.grp = vector of partition group (fold) for each
occurrence locality, intended for user-defined partitions, and bg.grp = same vector for background (or pseudo-absence) localities}

\item{occs.testing}{matrix / data frame: a full withheld testing dataset with two columns for longitude and latitude 
of occurrence localities, in that order -- when \code{partitions = "testing"}; these occurrences will be used only 
for evaluation but not for model training, and thus no cross validation will be performed}

\item{taxon.name}{character: name of the focal species or taxon -- used primarily for annotating
the ENMevaluation object and output metadata (rmm), but not necessary}

\item{n.bg}{numeric: if background records not already provided, this specifies the 
number of background (or pseudo-absence) points to randomly sample over envs raster (default: 10000)}

\item{overlap}{boolean: if TRUE, calculate niche overlap statistics}

\item{overlapStat}{character: niche overlap statistics to be calculated -- 
"D" (Schoener's D) and or "I" (Hellinger's I) -- see ?calc.niche.overlap for more details}

\item{user.val.grps}{matrix / data frame: user-defined validation record coordinates and predictor variable values -- 
this is used internally by ENMnulls() to force each null model to evaluate with empirical validation data}

\item{user.eval}{function: custom function for specifying performance metrics not included in ENMeval.
The function must be first defined and then input as the argument "user.eval" into ENMevaluate(). 
This function has a single argument called "vars", which is a list that includes different data 
that can be used to calculate the metric. See Details below and the vignette for a worked example.}

\item{rmm}{rangeModelMetadata object: if specified, ENMevaluate() will write metadata details for the analysis into
this object, but if not, a new rangeModelMetadata object will be generated and written to}

\item{parallel}{boolean: if TRUE, run with parallel processing}

\item{numCores}{numeric: number of cores to use for parallel processing; if NULL, all available cores will be used}

\item{parallelType}{character:: either "doParallel" or "doSNOW" (default: "doSNOW")}

\item{updateProgress}{boolean: if TRUE, use shiny progress bar; only for use in shiny apps}

\item{quiet}{boolean: if TRUE, silence all function messages (but not errors)}

\item{occ, env, bg.coords, RMvalues, fc, occ.grp, bg.grp, method, bin.output, rasterPreds, clamp, progbar}{these are included to avoid unnecessary errors for older scripts, but in a later version
these arguments will be permanently deprecated}
}
\value{
An ENMevaluation object. See ?ENMevaluation for details.
}
\description{
\code{ENMevaluate()} builds ecological niche models iteratively across a range of 
user-specified tuning settings. Users can choose to evaluate models with cross validation or a
full-withheld testing dataset. \code{ENMevaluate()} returns an \code{ENMevaluation} object with slots containing 
evaluation statistics for each combination of settings and for each cross validation fold therein, as
well as raster predictions for each model when raster data is input. The evaluation statistics in the 
results table should aid users in identifying model settings that balance fit and predictive ability.
}
\details{
There are a few methodological details in the implementation of ENMeval 2.0 that are important to mention.
They are also discussed briefly in ?other.settings and ?ENMnulls.

1. By default, validation AUC is calculated with respect to the full background (training + validation).
This approach follows Radosavljevic & Anderson (2014).This setting can be changed by assigning 
other.settings$validation.bg to "partition", which will calculate AUC with respect 
to the validation background only. The default value for other.settings$validation.bg is "full".

2. The continuous Boyce index is not calculated with respect to the RasterStack delineating the study extent,
but instead to the background records. This decision was made to simplify the code and improve running time. 
If the background records are a good representation of the study extent, there should not be much difference
between this and the raster approach.

3. Null occurrences for null ENMs are sample randomly from the background records, not the RasterStack
delineating the study extent. This decision was made for similar reasons to that for CBI, and as above,
there should be little difference as long as the background records represent the study extent well.

For other.settings, the options are:
abs.auc.diff - boolean: if TRUE, take absolute value of AUCdiff (default: TRUE)
validation.bg - character: either "full" to calculate training and validation AUC and CBI 
for cross-validation with respect to the full background (default), or "partition" (meant for 
spatial partitions only) to calculate each with respect to the partitioned background only 
(i.e., training occurrences are compared to training background, and validation occurrences 
compared to validation background)
pred.type - character: specifies which prediction type should be used to generate maxnet or 
maxent.jar prediction rasters (default: "cloglog")
other.args - named list: any additional model arguments not specified for tuning.

For partition.settings, the options are: 
orientation - character: one of "lat_lon", "lon_lat", "lat_lat", or "lon_lon" (required for block partition), 
aggregation.factor - numeric vector: one or two numbers specifying the factor with which to aggregate the envs 
raster to assign partitions (required for the checkerboard partitions)
kfolds - numeric: the number of folds (i.e., partitions) for random partitions. 

For the block partition, the orientation specifications are abbreviations for "latitude" and "longitude", 
and they determine the order and orientations with which the block partitioning function creates the partition groups. 
For example, "lat_lon" will split the occurrence localities first by latitude, then by longitude. For the checkerboard 
partitions, the aggregation factor specifies how much to aggregate the existing cells in the envs raster
to make new spatial partitions. For example, checkerboard1 with an aggregation factor value of 2 will make the grid cells 
4 times larger and then assign occurrence and background records to partition groups based on which cell they are in. 
The checkerboard2 partition is hierarchical, so cells are first aggregated to define groups like checkerboard1, but a 
second aggregation is then made to separate the resulting 2 bins into 4 bins. For checkerboard2, two different numbers 
can be used to specify the two levels of the hierarchy, or if a single number is inserted, that value will be used 
for both levels.

For user.eval, the accessible variables you have access to in order to run your custom function are: 
enm - ENMdetails object,
occs.train.z - data frame: predictor variable values for training occurrences
occs.val.z - data frame: predictor variable values for validation occurrences
bg.train.z - data frame: predictor variable values for training background
bg.val.z - data frame: predictor variable values for validation background
mod.k - Model object for current partition (k)
nk - numeric: number of folds (i.e., partitions)
other.settings - named list: other settings specified in ENMevaluate()
partitions - character: name of the partition method (e.g., "block")
occs.train.pred - numeric: predictions made by mod.k for training occurrences
occs.val.pred - numeric: predictions made by mod.k for validation occurrences
bg.train.pred - numeric: predictions made by mod.k for training background
bg.val.pred - numeric: predictions made by mod.k for validation background
}
\examples{
\dontrun{
occs <- read.csv(file.path(system.file(package="dismo"), "/ex/bradypus.csv"))[,2:3]
envs <- raster::stack(list.files(path=paste(system.file(package="dismo"), "/ex", sep=""), 
                                 pattern="grd", full.names=TRUE))
occs.z <- cbind(occs, raster::extract(envs, occs))
occs.z$biome <- factor(occs.z$biome)
bg <- as.data.frame(dismo::randomPoints(envs, 1000))
names(bg) <- names(occs)
bg.z <- cbind(bg, raster::extract(envs, bg))
bg.z$biome <- factor(bg.z$biome)
tune.args <- list(fc = c("L","LQ","LQH","H"), rm = 1:5)
os <- list(abs.auc.diff = FALSE, pred.type = "logistic", validation.bg = "partition")
ps <- list(orientation = "lat_lat")

e <- ENMevaluate(occs, envs, bg, tune.args = tune.args, partitions = "block", 
other.settings = os, partition.settings = ps,
algorithm = "maxnet", categoricals = "biome", overlap = TRUE)
}

}
