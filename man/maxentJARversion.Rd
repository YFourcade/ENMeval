% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utilities.R
\name{maxentJARversion}
\alias{maxentJARversion}
\title{# Modified version of dismo::mess
# This version ignores raster cells with NA for every variable, and it also
# removes variables that result in all Inf values (probably because the values for
# that variable for "v" are all 0), thus avoiding the generation of -Inf values and the corresponding warnings
enmeval.messi3 <- function(p,v) {
  # seems 2-3 times faster than messi2
  v <- stats::na.omit(v)
  f <- 100*findInterval(p, sort(v)) / length(v)
  minv <- min(v)
  maxv <- max(v)
  res <- 2*f 
  f[is.na(f)] <- -99
  i <- f>50 & f<100
  res[i] <- 200-res[i]
  
  i <- f==0 
  res[i] <- 100*(p[i]-minv)/(maxv-minv)
  i <- f==100
  res[i] <- 100*(maxv-p[i])/(maxv-minv)
  res
}}
\usage{
maxentJARversion()
}
\description{
#' @export
enmeval.mess <- function(x, v, full=FALSE, filename='', ...) {
  
  stopifnot(NCOL(v) == raster::nlayers(x))
  out <- raster(x)
  nl <- raster::nlayers(x)
  filename <- trim(filename)
  nms <- paste(names(x), '_mess', sep='')
  
  if (canProcessInMemory(x)) {
    x <- getValues(x)
    if (nl == 1) {
      rmess <- enmeval.messi3(x, v)
      names(out) <- 'mess'
      out <- setValues(out, rmess)
    } else {
      x <- sapply(1:ncol(x), function(i) enmeval.messi3(x[,i], v[,i]))
      colRemove <- numeric(ncol(x)) + 1
      for(i in 1:ncol(x)) if(sum(is.infinite(x[,i])) == length(na.omit(x[,i]))) colRemove[i] <- 0
      x <- x[,colRemove]
      rmess <- apply(x, 1, function(x) ifelse(!all(is.na(x)), min(x, na.rm=TRUE), NA))
      if (full) {
        out <- brick(out, nl=nl+1)
        names(out) <- c(nms, "mess")
        out <- setValues(out, cbind(x, rmess))
      } else {
        names(out) <- 'mess'
        out <- setValues(out, rmess)
      }
    }	
    if (filename != '') {
      out <- writeRaster(out, filename, ...)
    }
    return(out)
    
  } else {
    
    if (nl == 1) {
      
      names(out) <- "mess"
      tr <- blockSize(out)
      pb <- pbCreate(tr$n, ...)	
      out <- writeStart(out, filename, ...)
      for (i in 1:tr$n) {
        vv <- getValues(x, row=tr$row[i], nrows=tr$nrows[i])
        vv <- enmeval.messi3(vv, v)
        out <- writeValues(out, vv, tr$row[i])
        pbStep(pb) 
      }
      
    } else {
      
      if (full) {
        out <- brick(out, nl=nl+1)
        names(out) <- c(nms, "mess")
        tr <- blockSize(out)
        pb <- pbCreate(tr$n, ...)	
        out <- writeStart(out, filename, ...)
        for (i in 1:tr$n) {
          vv <- getValues(x, row=tr$row[i], nrows=tr$nrows[i])
          vv <- sapply(1:ncol(v), function(i) enmeval.messi3(vv[,i], v[,i]))
          m <- apply(vv, 1, min, na.rm=TRUE)
          out <- writeValues(out, cbind(vv, m), tr$row[i])
          pbStep(pb) 
        }
        
      } else {
        
        names(out) <- "mess"
        tr <- blockSize(out)
        pb <- pbCreate(tr$n, ...)	
        out <- writeStart(out, filename, ...)
        for (i in 1:tr$n) {
          vv <- getValues(x, row=tr$row[i], nrows=tr$nrows[i])
          vv <- sapply(1:ncol(v), function(i) enmeval.messi3(vv[,i], v[,i]))
          m <- apply(vv, 1, min, na.rm=TRUE)
          out <- writeValues(out, m, tr$row[i])
          pbStep(pb) 
        }
      }
    }
    out <- writeStop(out)
    pbClose(pb) 
  }	
  out
}
}
